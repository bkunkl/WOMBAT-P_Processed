metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, 0)), size = 3, hjust = 1.5, position = position_dodge(width = 0.5)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.2, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, 0)), size = 3, position = position_dodge(width = 0.5)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.2, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, 0)), size = 3, position = position_dodge(width = 0.0)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.2, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
?position_dodge
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, 0)), size = 3, vjust = -0.5, position = position_dodge(width = 0.9)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.5, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, max(0, round(max(value)*10)))), size = 3, vjust = -0.5, hjust=1, position = position_dodge(width = 0.9)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.5, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, max(0, round(max(value)*1000)))), size = 3, vjust = -0.5, hjust=1, position = position_dodge(width = 0.9)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.5, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, max(0, round(log(1/max(value)))))), size = 3, vjust = -0.5, hjust=1, position = position_dodge(width = 0.9)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.5, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, max(0, round(log(1/min(value)))))), size = 3, vjust = -0.5, hjust=1, position = position_dodge(width = 0.9)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.5, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Identification depth", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction identified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Difference between lowest and highest reported numbers")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
proteins <- s_proteins <- NULL
# Only needed for PXD009815
sample_types <- gsub("X"|CT_mixture_QY_|_CN_UPS1_CV_Standards_Research_Group", "", sample_types)
# Only needed for PXD009815
sample_types <- gsub("X|CT_mixture_QY_|_CN_UPS1_CV_Standards_Research_Group", "", sample_types)
#Calculate true FDR per workflow (only if ups proteins with ground thruth)
fdrs <- colSums(onediff[!grepl("ups", rownames(onediff)),] < 0.05) / colSums(onediff < 0.05)
fdrs
### Now on statistical test results
# Replace NA values in diff_proteins with 1
diff_proteins[is.na(diff_proteins)] <- 1
# Filter diff_proteins for 5% FDR threshold
diff_proteins_5perc <- diff_proteins[rowSums(diff_proteins < 0.05) > 0,]
# Filter diff_proteins for 1% FDR threshold
diff_proteins_1perc <- diff_proteins[rowSums(diff_proteins < 0.01) > 0,]
# Extract workflow names from selected columns
workflow_names <- str_extract(colnames(diff_proteins_5perc), paste(workflows, collapse = "|"))
# Define colors for workflow types
c_workflow_types <- brewer.pal(4, "Set1")[as.factor(workflow_names)]
# Select relevant columns based on folder name
if (grepl("PXD009815", folder)) {
onediff <- diff_proteins[, grep("500\\.amol", colnames(diff_proteins_5perc))]
onediff <- onediff[, grep("10\\.amol", colnames(onediff))]
} else {
onediff <- diff_proteins[, ]
onediff <- onediff[, ]
}
#Calculate true FDR per workflow (only if ups proteins with ground thruth)
fdrs <- colSums(onediff[!grepl("ups", rownames(onediff)),] < 0.05) / colSums(onediff < 0.05)
fdrs
# Calculate FDR combining workflows
workflow_fdr <- sum(rowMeans(onediff[!grepl("ups", rownames(onediff)),]) < 0.05) / sum(rowMeans(onediff) < 0.05)
workflow_fdr
# Create a plot for FDR thresholds
plot(fdr_range, fdr_sum[,1], log="x", ylim=c(min(na.omit(fdr_sum)),1), col=brewer.pal(4, "Set1")[1],
type="l", lty=2, xlab="FDR threshold", ylab="True FDR")
lines(fdr_range, fdr_sum[,2], col=brewer.pal(4, "Set1")[2], type="l", lty=2)
lines(fdr_range, fdr_sum[,3], col=brewer.pal(4, "Set1")[3], type="l", lty=2)
lines(fdr_range, fdr_sum[,4], col=brewer.pal(4, "Set1")[4], type="l", lty=2)
legend("topleft", fill=brewer.pal(4, "Set1"), legend=workflows, border=NA)
legend(7e-6, 0.6, lty=c(1,2), legend=c("Proteins", "True FDR"))
par(new=T)
plot(fdr_range, num_diff[,1], ylim=c(0,max(num_diff, na.rm=T)), type="l",
col=brewer.pal(4, "Set1")[1], axes=F, log="x", lwd=1, xlab="", ylab="")
axis(4, ylim=c(range(num_diff)))
mtext("Number of proteins", 4)
lines(fdr_range, num_diff[,2], type="l", col=brewer.pal(4, "Set1")[2], lwd=1)
lines(fdr_range, num_diff[,3], type="l", col=brewer.pal(4, "Set1")[3], lwd=1)
lines(fdr_range, num_diff[,4], type="l", col=brewer.pal(4, "Set1")[4], lwd=1)
# Create a plot for FDR thresholds
plot(fdr_range, fdr_sum[,1], log="x", ylim=c(min(na.omit(fdr_sum)),1), col=brewer.pal(4, "Set1")[1],
type="l", lty=2, xlab="FDR threshold", ylab="True FDR")
lines(fdr_range, fdr_sum[,2], col=brewer.pal(4, "Set1")[2], type="l", lty=2)
lines(fdr_range, fdr_sum[,3], col=brewer.pal(4, "Set1")[3], type="l", lty=2)
lines(fdr_range, fdr_sum[,4], col=brewer.pal(4, "Set1")[4], type="l", lty=2)
legend("topleft", fill=brewer.pal(4, "Set1"), legend=workflows, border=NA)
legend(7e-6, 0.6, lty=c(1,2), legend=c("Proteins", "True FDR"))
par(new=T)
# Overlay the plot with number of proteins
plot(fdr_range, num_diff[,1], ylim=c(0,max(num_diff, na.rm=T)), type="l",
col=brewer.pal(4, "Set1")[1], axes=F, log="x", lwd=1, xlab="", ylab="")
axis(4, ylim=c(range(num_diff)))
mtext("Number of proteins", 4)
lines(fdr_range, num_diff[,2], type="l", col=brewer.pal(4, "Set1")[2], lwd=1)
lines(fdr_range, num_diff[,3], type="l", col=brewer.pal(4, "Set1")[3], lwd=1)
lines(fdr_range, num_diff[,4], type="l", col=brewer.pal(4, "Set1")[4], lwd=1)
diff_proteins_5perc
dim(diff_proteins_5perc)
# Heatmap plot for
heatmap.2((diff_proteins_5perc), scale="none", trace="none",
col=colorpanel(1000, "white", "black"), ColSideColors=c_workflow_types,
RowSideColors = rainbow(2)[grepl("ups", rownames(diff_proteins_5perc))+1],
srtCol = 45, srtRow = 45, cexRow=40/ncol(qproteins), cexCol=40/ncol(qproteins),
sepwidth=c(0,0), sepcolor = NA)
legend(-5, 100, fill=brewer.pal(4, "Set1"), border=0,
legend=workflows, xpd=TRUE, cex = 0.7)
head(diff_proteins_5perc)
head(diff_proteins_1perc)
### Now on statistical test results
# Replace NA values in diff_proteins with 1
diff_proteins[is.na(diff_proteins)] <- 1
# Filter diff_proteins for 5% FDR threshold
diff_proteins_5perc <- diff_proteins[rowSums(diff_proteins < 0.05) > 0,]
# Filter diff_proteins for 1% FDR threshold
diff_proteins_1perc <- diff_proteins[rowSums(diff_proteins < 0.01) > 0,]
# Extract workflow names from selected columns
workflow_names <- str_extract(colnames(diff_proteins_5perc), paste(workflows, collapse = "|"))
# Define colors for workflow types
c_workflow_types <- brewer.pal(4, "Set1")[as.factor(workflow_names)]
# Select relevant columns based on folder name
if (grepl("PXD009815", folder)) {
onediff <- diff_proteins[, grep("500\\.amol", colnames(diff_proteins_5perc))]
onediff <- onediff[, grep("10\\.amol", colnames(onediff))]
} else {
onediff <- diff_proteins[, ]
onediff <- onediff[, ]
}
#Calculate true FDR per and across workflows (only if ups proteins with ground thruth)
fdrs <- colSums(onediff[!grepl("ups", rownames(onediff)),] < 0.05) / colSums(onediff < 0.05)
workflow_fdr <- sum(rowMeans(onediff[!grepl("ups", rownames(onediff)),]) < 0.05) / sum(rowMeans(onediff) < 0.05)
# Calculate FDR for a range of threshold values
fdr_sum <- num_diff <- data.frame()
fdr_range <- 10^seq(-5, 0, 0.01)
for (i in fdr_range) {
fdr_sum <- rbind(fdr_sum, colSums(onediff[!grepl("ups", rownames(onediff)),] < i) / colSums(onediff < i))
num_diff <- rbind(num_diff, colSums(onediff < i))
}
# Create a plot for true FDR vs FDR thresholds (only for ground truth data)
plot(fdr_range, fdr_sum[,1], log="x", ylim=c(min(na.omit(fdr_sum)),1), col=brewer.pal(4, "Set1")[1],
type="l", lty=2, xlab="FDR threshold", ylab="True FDR")
lines(fdr_range, fdr_sum[,2], col=brewer.pal(4, "Set1")[2], type="l", lty=2)
lines(fdr_range, fdr_sum[,3], col=brewer.pal(4, "Set1")[3], type="l", lty=2)
lines(fdr_range, fdr_sum[,4], col=brewer.pal(4, "Set1")[4], type="l", lty=2)
legend("topleft", fill=brewer.pal(4, "Set1"), legend=workflows, border=NA)
legend(7e-6, 0.6, lty=c(1,2), legend=c("Proteins", "True FDR"))
par(new=T)
# Overlay the plot with number of proteins
plot(fdr_range, num_diff[,1], ylim=c(0,max(num_diff, na.rm=T)), type="l",
col=brewer.pal(4, "Set1")[1], axes=F, log="x", lwd=1, xlab="", ylab="")
axis(4, ylim=c(range(num_diff)))
mtext("Number of proteins", 4)
lines(fdr_range, num_diff[,2], type="l", col=brewer.pal(4, "Set1")[2], lwd=1)
lines(fdr_range, num_diff[,3], type="l", col=brewer.pal(4, "Set1")[3], lwd=1)
lines(fdr_range, num_diff[,4], type="l", col=brewer.pal(4, "Set1")[4], lwd=1)
# Pairs plot comparing FDR values
pairs(diff_proteins)
# Pairs plot comparing FDR values
pairs(log10(diff_proteins), cex=.5, col="#00000099")
## UpSet plot comparing the performance
colnames(onediff) <- workflows
common_font_size <- 6
upset(as.data.frame(onediff<0.05)*1, sets = workflows, sets.x.label = "Differentially regulated proteins",
sets.bar.color = c_workflows, main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated proteins, FDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
# pdf("Figure3DiffRegUPS_1.pdf", width=4, height=4)
upset(as.data.frame(onediff[!grepl("ups", rownames(onediff)), ]<0.05)*1,
sets = workflows, sets.x.label = "Total number\nper workflow",
sets.bar.color = c_workflows, main.bar.color = "#AA6666",
mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated yeast proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
# pdf("Figure3DiffRegUPS_2.pdf", width=4, height=4)
upset(as.data.frame(onediff[grepl("ups", rownames(onediff)), ]<0.05)*1, sets = workflows,
sets.x.label = "Total number\nper workflow",
sets.bar.color = c_workflows, main.bar.color = "#6666AA",
mainbar.y.label = "Proteins in subset")
# dev.off()
upset(as.data.frame(onediff[grepl("ups", rownames(onediff)), ]<0.05)*1, sets = workflows,
sets.bar.color = c_workflows, main.bar.color = "#66AA66", mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated ups proteins, FDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=10))
## UpSet plot comparing the performance
colnames(onediff) <- workflows
common_font_size <- 6
upset(as.data.frame(onediff<0.05)*1, sets = workflows, sets.x.label = "Differentially regulated proteins",
sets.bar.color = c_workflows, main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated proteins, FDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
# pdf("Figure3DiffRegUPS_1.pdf", width=4, height=4)
upset(as.data.frame(onediff[!grepl("ups", rownames(onediff)), ]<0.05)*1,
sets = workflows, sets.x.label = "Total number\nper workflow",
sets.bar.color = c_workflows, main.bar.color = "#AA6666",
mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated yeast proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
# pdf("Figure3DiffRegUPS_2.pdf", width=4, height=4)
upset(as.data.frame(onediff[grepl("ups", rownames(onediff)), ]<0.05)*1, sets = workflows,
sets.x.label = "Total number\nper workflow",
sets.bar.color = c_workflows, main.bar.color = "#6666AA",
mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated UPS proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
# dev.off()
upset(as.data.frame(onediff[grepl("ups", rownames(onediff)), ]<0.05)*1, sets = workflows,
sets.bar.color = c_workflows, main.bar.color = "#66AA66", mainbar.y.label = "Proteins in subset")
grid.text("Differentially regulated ups proteins, FDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=10))
## RUn clusterProfiler on differentially regulated proteins
# reduce to only unique proteins
reddiff <- onediff[!grepl(";|,", rownames(onediff)),]
# change to entrez gene ids
mapped_ids <- bitr(rownames(reddiff), "UNIPROT", "ENTREZID", OrgDb = org.Hs.eg.db)
reddiff <- reddiff[mapped_ids$UNIPROT, ]
rownames(reddiff) <- mapped_ids$ENTREZID
enriched <- list()
for (i in workflow_names) {
enriched[[i]] <- rownames(reddiff[reddiff[,i]<0.05,])
}
enriched$ThreeOfFour <- rownames(reddiff[rowSums(reddiff<0.05) > 2, ])
cc <- compareCluster(enriched, fun = "enrichPathway", pvalueCutoff = 0.05)
dotplot(cc, showCategory = 15)  +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x = element_blank(), axis.text.y = element_text(size=9))
